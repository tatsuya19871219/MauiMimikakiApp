@startuml MimikakiClassDiagram
' Models
' class MimiModel
' {
'     - height : int
'     - width : int
'     - topRegion : MimiRegion
'     - centerRegion : MimiRegion
'     - bottomRegion : MimiRegion
' }

class MimiViewBox
{
    + Bounds : Rect <<required>>
    + GetBoundsAsync() : Task<Rect>
}

class MimiRegion
{
    + Bounds : Rect
    + Hairs : IEnumerable<MimiHair>
    + Dirts : IEnumerable<MimiDirt>
    - internalRegion : InternalRegion
    - hairList : List<MimiHair>
    - dirtList : List<MimiDirt>
    + MimiRegion(pathF : PathF, dx : int, dy : int)
    '+ MimiRegion(internalRegion : InternalRegion)
    - InitializeMimiHair(density : double)
    '+ OnTouch : Action
    '+ OnDirtRemoving : Action
    '+ OnDirtRemoved : Action
}

interface ITrackerListener
{
    OnMove(position : Point, velocity : Point, milliSecUpdateInterval : double) : void
}

class MimiHair
{
    - origin : Point
    - position : Point
    - springConst : double
    + MimiHair(position : Point)
    + GetPosition() : Point
    + UpdatePosition(force : Point) : void
}

class MimiDirt
{
    - position : Point
    - hardness : double
    + MimiDirt(position : Point, hardness : double)
}

interface IRegion
{
    ' IsInner : bool[,]
    ' IsBoundary : bool[,]
    ContainsInRegion(point : Point) : bool
    OnBoundary(point : Point) : bool
}

class InternalRegion
{
    + Bounds : Rect <<read only>>
    '- topLeft : Point <<read only>>
    '- bottomRight : Point <<read only>>
    - isInner : bool[,] <<read only>>
    - isBoundary : bool[,] <<read only>>
    - subRegions : List<SubRegion> 
    + InternalRegion(pathF : PathF, dx : int, dy : int)
    ' - FillBoundaryPoints(pathF : PathF) : void
    ' - FillInternalRegion() : void
    - ConvertToRegionIndex(x : double, y : double) : (int, int)
    + ContainsInRegion(point : Point) : bool
    + ContainsInRegion(x: double, y : double) : bool
}

class SubRegion
{
    - isInner : bool[,] <<read only>>
    - isBoundary : bool[,] <<read only>>
    + SubRegion(pathF : PathF, dx : int, dy : int)
    - FillBoundaryPoints(pathF : PathF) : void
    - FillInternalRegion() : void
    - ConvertToRegionIndex(x : double, y : double) : (int, int)
    + ContainsInRegion(point : Point) : bool
    + ContainsInRegion(x: double, y : double) : bool
}

' Views
class MimikakiView
{
    + TargetImageSource : ImageSource
    '+ TargetImageOriginalHeight : double
    '+ MimiTrackerLayer : View <<get only property>>
    '+ DisplayRatio : double? <<get only property>>
    '- MimikakiViewModel _vm;
    '+ TrackableView()
    + MimikakiView(viewbox : MimiViewBox, outer : Path, inner : Path, hole : Path)
    '- TargetImage_SizeChanged(sender : object, e : EventArgs) : void
    '- Initialize() : void
    - AddFloatingDirt(dirtObject : Shape) : void
}


' ViewModels
class MimikakiViewModel
{
    - tracker : PositionTracker
    + TopRegionDrawable : MimiRegionDrawable <<observable>>
    + CenterRegionDrawable : MimiRegionDrawable <<observable>>
    + BottomRegionDrawable : MimiRegionDrawable <<observable>>
    - topRegion : MimiRegion
    - centerRegion : MimiRegion
    - bottomRegion : MimiRegion
    - tracker : PositionTracker
    '+ OnMoveOnMimi : Action
    '+ BindTrackableMimi(trackableMimiView : TrackableMimiView) : void
    '- RunTrackerProcess()
    ~ MimikakiViewModel(viewbox : MimiViewBox, outer : Path, inner : Path, hole : Path)
    '~ MimikakiViewModel(tracker : PositionTracker, mimiTop : Geometry, mimiCenter : Geometry, mimiBottom : Geometry)
    - Initialize();
    '~ InvokeTrackerProcess(updateInterval : int) : void
    - RunTrackerProcess(updateInterval : int) : void
    ~ TargetImage_SizeChanged(sender : object, e : EventArgs) : void
}


' Drawable
class MimiRegionDrawable
{
    + WidthRequest : double
    + HeightRequest : double
    + OffsetX : double
    + OffsetY : double
    - mimiRegion : MimiRegion
    '- internal : InternalRegion
    - padding : float
    - offsetX : double
    - offsetY : double
    + MimiRegionDrawable(mimiRegion : MimiRegion, padding : double)
    + Draw(canvas : ICanvas, dirtyRect : RectF) : void
    - VisualizeHair(canvas : ICanvas, color : Color, thinness : float) : void
}


' Page
class MainPage
{
    + MainPage()
    '- InitializeMimiViewModel() : void
    '- InstantiateMimiViewModel(tracker : PositionTracker) : TrackableMimiViewModel
    '- GetGeometryFromString(pathString : string) : Geometry
}

' Library
package TakeMauiEasy
{
    class EasyTasks
    class PositionTracker
}

' 
MimiRegion -> InternalRegion
MimiRegion *-- MimiHair
MimiRegion *-- MimiDirt

InternalRegion *-- SubRegion
InternalRegion ..|> IRegion
SubRegion ..|> IRegion

MimiHair ..|> ITrackerListener
MimiDirt ..|> ITrackerListener

MimikakiViewModel -left-> MimiViewBox
MimikakiViewModel --> PositionTracker
MimikakiViewModel o-- "3" MimiRegionDrawable

MimikakiView ..> MimikakiViewModel : <create>

MainPage -> MimikakiView

'MimiRegionDrawable --|> IDrawable
MimiRegionDrawable --> MimiRegion

@enduml

@startuml MimikakiMessages

' Message
class MimiViewInvalidateMessage <<(M, Orange) Message>>
{
    ~ MimiViewInvalidateMessage(value : string)
}

class FloatingDirtGenerateMessage <<(M, Orange) Message>>
{
    ~ FloatingDirtGenerateMessage(dirt : Shape)
}

class TrackerUpdateMessage <<(M, Orange) Message>>
{
    ~ TrackerUpdateMessage(state : PositionTrackerState)
}


MainPage ..> TrackerUpdateMessage : <register>
MimikakiView ..> MimiViewInvalidateMessage : <register>
MimikakiView ..> FloatingDirtGenerateMessage : <register>

MimikakiViewModel .up.> TrackerUpdateMessage : <create>
MimikakiViewModel .up.> MimiViewInvalidateMessage : <create>
MimikakiViewModel .up.> FloatingDirtGenerateMessage : <create>

@enduml
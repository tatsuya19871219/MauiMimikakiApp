@startuml Mimikaki

' Views
class MimikakiView <<V, HotPink>>
{
    + ImageFilename : string <<required>>
    + MimikakiView(viewbox : MimiViewBox, outer : Path, inner : Path, hole : Path)
    + RegisterMessages(): void
    - InvalidateRegions() : void
    - AddFloatingDirt(dirtObject : Shape) : void
}

class MimiViewBox
{
    + Bounds : Rect <<required>>
    + GetBoundsAsync() : Task<Rect>
}

' ViewModels
class MimikakiViewModel
{
    - tracker : PositionTracker
    + TopRegionDrawable : MimiRegionDrawable <<observable>>
    + CenterRegionDrawable : MimiRegionDrawable <<observable>>
    + BottomRegionDrawable : MimiRegionDrawable <<observable>>
    - topRegion : MimiRegion
    - centerRegion : MimiRegion
    - bottomRegion : MimiRegion
    - tracker : PositionTracker
    ~ MimikakiViewModel(viewbox : MimiViewBox, outer : Path, inner : Path, hole : Path)
    - TargetSizeChanged(View target) : void
    - InitializeModelAsync(condition : Func<bool>) : void
    - PrepareDrawableAsync(condition : Func<bool>) : void
    - InvokeMimikakiAsyn(condition : Func<bool>) : void
    - RunGraphicsUpdateProcess(graphicsUpdateInterval : int) : void
    - RunTrackerProcess(trackerUpdateInterval : int) : void
    - TryGenerateDirt(region : MimiRegion, prob : double, dt : double) : void
    - CheckDirtRemoved(region : MimiRegion) : void
    - ScaleForDisplayRatio(point : Point) : Point
}

class MimiRegionViewBox <<Observable Object>>
{
    + RegionWidthRequest : double
    + RegionHeightRequest : double
    + RegionOffsetX : double
    + RegionOffsetY : double
    ~ MimiRegionViewBox(mimiRegion : MimiRegion)
}

' Drawable
class MimiRegionDrawable
{
    - mimiRegion : MimiRegion
    - viewBox : MimiRegionViewBox
    + MimiRegionDrawable(mimiRegion : MimiRegion, padding : double)
    + Draw(canvas : ICanvas, dirtyRect : RectF) : void
    - VisualizeHairs(canvas : ICanvas) : void
    - VisualizeDirts(canvas : ICanvas) : void
}

' Page
class MainPage <<(P, LimeGreen)>>
{
    - kakiSEPlayer : IAudioPlayer
    - config : MimikakiConfig
    + MainPage(audioManager : IAudioManager)
    - RegisterTrackerMessages() : void
    - UpdateHeaderText() : void
    - UpdateFooterTExt(state : PositionTrackerState) : void
    - PrepareSEPlayer(audioManager : IAudioManager, rightInInit : bool) : void
}

' Config
class MimikakiConfig
{
    {static} - assambly : Assembly <<readonly>>
    {static} + Current : MimikakiConfig
    {static} - MimikakiConfig()
    {static} ~ Load(filename : string) : MimikakiConfig
}

' record class for DTO (data transfer object)
class ModelParams <<(R, LightGreen) record>>
{

}

' Library
package TakeMauiEasy
{
    class EasyTasks
    class PositionTracker
}

' arrows
MimikakiView .. MimiViewBox : <create>
MimikakiViewModel -left-> MimiViewBox

MimikakiViewModel -down-> PositionTracker
MimikakiViewModel o-right- "3" MimiRegionDrawable

MimikakiViewModel o-up- "3" MimiRegionViewBox
MimikakiViewModel o- "3" MimiRegion

MimikakiView ..> MimikakiViewModel : <create>

MainPage --> MimikakiView

MainPage .right.> MimikakiConfig : <<create>>
MimikakiConfig -right-> ModelParams

'MimiRegionDrawable --|> IDrawable
MimiRegionDrawable --> MimiRegion
MimiRegionDrawable --> MimiRegionViewBox

@enduml

@startuml MimiRegion
' Models
class MimiRegion
{
    + Bounds : Rect
    + Hairs : IEnumerable<MimiHair>
    + Dirts : IEnumerable<MimiDirt>
    - internalRegion : InternalRegion
    - hairList : List<MimiHair>
    - dirtList : List<MimiDirt>
    - modelParams : ModelParams
    + MimiRegion(pathF : PathF, modelParams : ModelParams)
    - InitializeMimiHair(density : double)
    ~ GenerateMimiDirt() : void
    ~ RemoveMimiDirt() : void
    ~ Contains(point : Point) : bool
}

interface ITrackerListener
{
    OnMove(position : Point, velocity : Point, milliSecUpdateInterval : double) : void
}

class MimiHair
{
    ~ Origin : Point
    ~ Pposition : Point
    ~ Thinness : double
    ~ HairColor : Color
    - springConst : double
    - config : MimiHairConfig
    ~ MimiHair(origin : Point, config : MimiHairConfig)
    - Displace(displacement : Point) : void
    '- UpdatePositionAsync() : void
}

class MimiDirt
{
    ~ IsRemoved : bool
    ~ Position : Point
    ~ Size : double
    ~ DirtColor : Color
    - hardness : double
    - config : MimiDirtConfig
    - amountOfStimulus : double
    + MimiDirt(position : Point, config : MimiDirtConfig)
}

' RegionModels
abstract AbstractRegion
{
    # bounds : Rect
    ~ AbstractRegion(edgeSet : EdgeSet)
    {abstract} ~ ContainsInRegion(point : Point) : bool
    {abstract} ~ OnBoundary(point : Point) : bool
    {abstract} ~ DistanceFromBoundary(point : Point) : double
    - GetMinAndMaxPoints(edgeSet : EdgeSet, minPoint : out Point, maxPoint : out Point) : void
}

class InternalRegion
{
    + Bounds : Rect
    - subRegions : List<SubRegion>
    + InternalRegion(edgeSet : EdgeSet, dx : int, dy : int)
    + GeneratePointInRegion() : Point
}

class SubRegion
{
    - gridX : List<int>
    - gridY : List<int>
    - isInner : bool[,] <<read only>>
    - isBoundary : bool[,] <<read only>>
    + SubRegion(edgeSet : EdgeSet, sharedEdges : List<Edge>, dx : int, dy : int)
    - FillBoundaryPoints(edgeSet : EdgeSet, sharedEdges : List<Edges>) : void
    - FillInternalRegion() : void
    - IsOutOfGrid(point : Point) : bool
    - ConvertToRegionIndex(point : Point) : (int, int)
    - GetPositionOfIndex(idx_x, idx_y) : Point
    - GetBoundaryPointList() : List<Point>
}

class EdgeSet <<IEnumerable>>
{
    - pathF : PathF
    - edges : List<Edge>
    - verticies : List<Point>
    ~ IsClosed : bool
    ~ EdgeSet(pathF : PathF)
    ~ Separate() : List<EdgeSet>
    ~ GetVerticies() : List<PointF>
}

class Edge <<(R, LightGreen) record>>
{
    + Edge(a : PointF, b : PointF)
    + Equals(target : Edge) : bool
}

' arrows
MimiRegion -> InternalRegion
MimiRegion *-- MimiHair
MimiRegion *-- MimiDirt

InternalRegion *- SubRegion
InternalRegion --|> AbstractRegion
SubRegion --|> AbstractRegion

MimiHair ..|> ITrackerListener
MimiDirt ..|> ITrackerListener

AbstractRegion -> EdgeSet

EdgeSet *-- Edge

InternalRegion -[hidden]- EdgeSet

@enduml

@startuml MimikakiMessages

namespace Messages{

    class TrackerUpdateMessage <<(M, Orange) Message>>
    {
        ~ TrackerUpdateMessage(state : PositionTrackerState)
    }

    class TrackerOnMimiMessage <<(M, Orange) Message>>
    {
        ~ TrackerOnMimiMessage(state : PositionTrackerState)
    }

    class MimiViewInvalidateMessage <<(M, Orange) Message>>
    {
        ~ MimiViewInvalidateMessage(value : string)
    }

    class FloatingDirtGenerateMessage <<(M, Orange) Message>>
    {
        ~ FloatingDirtGenerateMessage(dirt : Shape)
    }

    ' Force to align vertically
    TrackerUpdateMessage -[hidden]- TrackerOnMimiMessage
    TrackerOnMimiMessage -[hidden]- MimiViewInvalidateMessage
    MimiViewInvalidateMessage -[hidden]- FloatingDirtGenerateMessage

}

MainPage .left.> Messages.TrackerUpdateMessage : <register>
MainPage .left.> Messages.TrackerOnMimiMessage : <register>

MimikakiView .left.> Messages.TrackerUpdateMessage : <register>
MimikakiView .left.> Messages.MimiViewInvalidateMessage : <register>
MimikakiView .left.> Messages.FloatingDirtGenerateMessage : <register>

MimikakiViewModel .> Messages.TrackerUpdateMessage : <create>
MimikakiViewModel .> Messages.TrackerOnMimiMessage : <create>
MimikakiViewModel .> Messages.MimiViewInvalidateMessage : <create>
MimikakiViewModel .> Messages.FloatingDirtGenerateMessage : <create>

@enduml